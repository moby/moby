#!/usr/bin/env bash
set -eu

: "${OUTPUT=./bundles}"
: "${PACKAGE=./cmd/dockerd}"
: "${TARGETPLATFORM=}"

: "${CGO_ENABLED=}"

: "${DOCKER_DEBUG=}"
: "${DOCKER_STRIP=}"
: "${DOCKER_LINKMODE=static}"
: "${DOCKER_LDFLAGS=}"
: "${DOCKER_BUILDMODE=}"
: "${DOCKER_BUILDFLAGS=}"

: "${VERSION=}"
: "${GITCOMMIT=}"
: "${BUILDTIME=}"
: "${PLATFORM=}"
: "${PRODUCT=}"
: "${DEFAULT_PRODUCT_LICENSE=}"
: "${PACKAGER_NAME=}"

# for non-sandboxed invocation
if ! command -v xx-go > /dev/null 2>&1; then
	export GO111MODULE=off
	if [ "$(go env GOOS)/$(go env GOARCH)" != "$(go env GOHOSTOS)/$(go env GOHOSTARCH)" ]; then
		case "$(go env GOOS)/$(go env GOARCH)" in
			windows/amd64)
				export CC="${CC:-x86_64-w64-mingw32-gcc}"
				export CGO_ENABLED=1
				;;
			linux/arm)
				case "${GOARM}" in
					5)
						export CC="${CC:-arm-linux-gnueabi-gcc}"
						export CGO_ENABLED=1
						export CGO_CFLAGS="-march=armv5t"
						export CGO_CXXFLAGS="-march=armv5t"
						;;
					6)
						export CC="${CC:-arm-linux-gnueabi-gcc}"
						export CGO_ENABLED=1
						export CGO_CFLAGS="-march=armv6"
						export CGO_CXXFLAGS="-march=armv6"
						;;
					7)
						export CC="${CC:-arm-linux-gnueabihf-gcc}"
						export CGO_ENABLED=1
						export CGO_CFLAGS="-march=armv7-a"
						export CGO_CXXFLAGS="-march=armv7-a"
						;;
					*)
						export CC="${CC:-arm-linux-gnueabihf-gcc}"
						export CGO_ENABLED=1
						;;
				esac
				;;
			linux/arm64)
				export CC="${CC:-aarch64-linux-gnu-gcc}"
				export CGO_ENABLED=1
				;;
			linux/amd64)
				export CC="${CC:-x86_64-linux-gnu-gcc}"
				export CGO_ENABLED=1
				;;
			linux/ppc64le)
				export CC="${CC:-powerpc64le-linux-gnu-gcc}"
				export CGO_ENABLED=1
				;;
			linux/s390x)
				export CC="${CC:-s390x-linux-gnu-gcc}"
				export CGO_ENABLED=1
				;;
		esac
	fi
fi

if [ -z "$VERSION" ]; then
	VERSION=$(git describe --match 'v[0-9]*' --dirty='.m' --always --tags | sed 's/^v//' 2> /dev/null || echo "unknown-version")
fi
if [ -z "$GITCOMMIT" ]; then
	GITCOMMIT=$(git rev-parse --short HEAD 2> /dev/null || true)
fi
if [ -z "$BUILDTIME" ]; then
	BUILDTIME=$(date -u --date="@${SOURCE_DATE_EPOCH:-$(date +%s)}" +"%Y-%m-%dT%H:%M:%SZ")
fi

BIN_NAME=$(basename "$PACKAGE")
BIN_EXT=
if [ "$(go env GOOS)" = "windows" ]; then
	BIN_EXT=.exe
fi

# -buildmode=pie is not supported on Windows arm64 and Linux mips*, ppc64be
# https://github.com/golang/go/blob/4aa1efed4853ea067d665a952eee77c52faac774/src/cmd/internal/sys/supported.go#L125-L131
if [ "$CGO_ENABLED" = "1" ]; then
	case "$(go env GOOS)/$(go env GOARCH)" in
		windows/arm64 | linux/mips* | linux/ppc64) ;;
		*)
			DOCKER_BUILDMODE="-buildmode=pie"
			;;
	esac
fi

DOCKER_LDFLAGS+="\
	-X \"github.com/docker/docker/dockerversion.Version=${VERSION}\" \
	-X \"github.com/docker/docker/dockerversion.GitCommit=${GITCOMMIT}\" \
	-X \"github.com/docker/docker/dockerversion.BuildTime=${BUILDTIME}\" \
	-X \"github.com/docker/docker/dockerversion.PlatformName=${PLATFORM}\" \
	-X \"github.com/docker/docker/dockerversion.ProductName=${PRODUCT}\" \
	-X \"github.com/docker/docker/dockerversion.DefaultProductLicense=${DEFAULT_PRODUCT_LICENSE}\" \
"

if [ -z "$DOCKER_DEBUG" ]; then
	DOCKER_LDFLAGS+=" -w"
fi

if [ -n "$DOCKER_STRIP" ]; then
	DOCKER_LDFLAGS+=" -s"
fi

# compile the Windows resources into the sources
if [ "$(go env GOOS)" = "windows" ]; then
	(
		. hack/make/.mkwinres
		go generate -v "${PACKAGE}"
	)
fi

# only necessary for non-sandboxed invocation where TARGETPLATFORM is empty
PLATFORM_NAME=$TARGETPLATFORM
if [ -z "$PLATFORM_NAME" ]; then
	PLATFORM_NAME="$(go env GOOS)/$(go env GOARCH)"
	if [ -n "$(go env GOARM)" ]; then
		PLATFORM_NAME+="/$(go env GOARM)"
	elif [ -n "$(go env GOAMD64)" ] && [ "$(go env GOAMD64)" != "v1" ]; then
		PLATFORM_NAME+="/$(go env GOAMD64)"
	fi
fi

echo "Building $DOCKER_LINKMODE $BIN_NAME ($PLATFORM_NAME)..."
(
	go build -o "${OUTPUT}/${BIN_NAME}${BIN_EXT}" -trimpath ${DOCKER_BUILDMODE} "${DOCKER_BUILDFLAGS[@]}" -ldflags "${DOCKER_LDFLAGS}" "${PACKAGE}"
	echo "Created binary: ${OUTPUT}/${BIN_NAME}${BIN_EXT}"
)

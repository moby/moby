#!/usr/bin/env bash
#
# Run unit tests and create report
#
# TESTFLAGS - add additional test flags. Ex:
#
#   TESTFLAGS='-v -run TestBuild' hack/test/unit
#
# TESTDIRS - run tests for specified packages. Ex:
#
#   TESTDIRS='./pkg/term' hack/test/unit
#
set -eux -o pipefail

BUILDFLAGS=(-tags 'netgo journald')
TESTFLAGS+=" -test.timeout=${TIMEOUT:-5m}"
TESTDIRS="${TESTDIRS:-./...}"

mkdir -p bundles

if [[ ${TESTDIRS} == "./api"* || ${TESTDIRS} == "./..." ]]; then
	pushd api >/dev/null
	api_pkg_list=$(go list .${TESTDIRS#./api})
	if [ -n "${api_pkg_list}" ]; then
		gotestsum --format=standard-quiet --jsonfile=../bundles/api-go-test-report.json --junitfile=../bundles/api-junit-report.xml -- \
			"${BUILDFLAGS[@]}" \
			-cover \
			-coverprofile=../bundles/api-coverage.out \
			-covermode=atomic \
			${TESTFLAGS} \
			${api_pkg_list}
	fi
	popd >/dev/null
fi

if [[ ${TESTDIRS} == "./client"* || ${TESTDIRS} == "./..." ]]; then
	pushd client >/dev/null

	client_pkg_list=$(go list .${TESTDIRS#./client})
	if [ -n "${client_pkg_list}" ]; then
		gotestsum --format=standard-quiet --jsonfile=../bundles/client-go-test-report.json --junitfile=../bundles/client-junit-report.xml -- \
			"${BUILDFLAGS[@]}" \
			-cover \
			-coverprofile=../bundles/client-coverage.out \
			-covermode=atomic \
			${TESTFLAGS} \
			${client_pkg_list}
	fi
	popd >/dev/null
fi

if [[ ${TESTDIRS} != "./api"* && ${TESTDIRS} != "./client"* ]]; then
	exclude_paths='/vendor/|/integration'
	pkgs=$(go list $TESTDIRS | grep -vE "($exclude_paths)")

	pkg_list=$(echo "${pkgs}" | grep --fixed-strings -v "/libnetwork" || :)
	libnetwork_pkg_list=$(echo "${pkgs}" | grep --fixed-strings "/libnetwork" || :)

	echo "${libnetwork_pkg_list}" | grep --fixed-strings "libnetwork/drivers/bridge" \
		&& if ! type docker-proxy; then
			hack/make.sh binary-proxy install-proxy
		fi

	if [ -n "${pkg_list}" ]; then
		gotestsum --format=standard-quiet --jsonfile=bundles/go-test-report.json --junitfile=bundles/junit-report.xml -- \
			"${BUILDFLAGS[@]}" \
			-cover \
			-coverprofile=bundles/coverage.out \
			-covermode=atomic \
			${TESTFLAGS} \
			${pkg_list}
	fi

	if [ -n "${libnetwork_pkg_list}" ]; then
		rerun_flaky=1

		gotest_extra_flags="-skip=TestFlaky.*"
		# Custom -run passed, don't run flaky tests separately.
		if echo "$TESTFLAGS" | grep -Eq '(-run|-test.run)[= ]'; then
			rerun_flaky=0
			gotest_extra_flags=""
		fi

		# libnetwork tests invoke iptables, and cannot be run in parallel. Execute
		# tests within /libnetwork with '-p=1' to run them sequentially. See
		# https://github.com/moby/moby/issues/42458#issuecomment-873216754 for details.
		gotestsum --format=standard-quiet --jsonfile=bundles/libnetwork-go-test-report.json --junitfile=bundles/libnetwork-junit-report.xml \
			-- "${BUILDFLAGS[@]}" \
			-cover \
			-coverprofile=bundles/libnetwork-coverage.out \
			-covermode=atomic \
			-p=1 \
			${gotest_extra_flags} \
			${TESTFLAGS} \
			${libnetwork_pkg_list}

		if [ $rerun_flaky -eq 1 ]; then
			gotestsum --format=standard-quiet --jsonfile=bundles/libnetwork-flaky-go-test-report.json --junitfile=bundles/libnetwork-flaky-junit-report.xml \
				--packages "${libnetwork_pkg_list}" \
				--rerun-fails=4 \
				-- "${BUILDFLAGS[@]}" \
				-cover \
				-coverprofile=bundles/libnetwork-flaky-coverage.out \
				-covermode=atomic \
				-p=1 \
				-test.run 'TestFlaky.*' \
				${TESTFLAGS}
		fi
	fi
fi

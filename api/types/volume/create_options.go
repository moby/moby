// Code generated by go-swagger; DO NOT EDIT.

package volume

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CreateOptions VolumeConfig
//
// # Volume configuration
//
// swagger:model CreateOptions
type CreateOptions struct {

	// cluster volume spec
	ClusterVolumeSpec *ClusterVolumeSpec `json:"ClusterVolumeSpec,omitempty"`

	// Name of the volume driver to use.
	// Example: custom
	Driver string `json:"Driver,omitempty"`

	// A mapping of driver options and values. These options are
	// passed directly to the driver and are driver specific.
	//
	// Example: {"device":"tmpfs","o":"size=100m,uid=1000","type":"tmpfs"}
	DriverOpts map[string]string `json:"DriverOpts,omitempty"`

	// User-defined key/value metadata.
	// Example: {"com.example.some-label":"some-value","com.example.some-other-label":"some-other-value"}
	Labels map[string]string `json:"Labels,omitempty"`

	// The new volume's name. If not specified, Docker generates a name.
	//
	// Example: tardis
	Name string `json:"Name,omitempty"`
}

// Validate validates this create options
func (m *CreateOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterVolumeSpec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateOptions) validateClusterVolumeSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterVolumeSpec) { // not required
		return nil
	}

	if m.ClusterVolumeSpec != nil {
		if err := m.ClusterVolumeSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ClusterVolumeSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ClusterVolumeSpec")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create options based on the context it is used
func (m *CreateOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusterVolumeSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateOptions) contextValidateClusterVolumeSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterVolumeSpec != nil {

		if swag.IsZero(m.ClusterVolumeSpec) { // not required
			return nil
		}

		if err := m.ClusterVolumeSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ClusterVolumeSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ClusterVolumeSpec")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateOptions) UnmarshalBinary(b []byte) error {
	var res CreateOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Summary summary
//
// swagger:model Summary
type Summary struct {

	// Number of containers using this image. Includes both stopped and running
	// containers.
	//
	// This size is not calculated by default, and depends on which API endpoint
	// is used. `-1` indicates that the value has not been set / calculated.
	//
	// Example: 2
	// Required: true
	Containers int64 `json:"Containers"`

	// Date and time at which the image was created as a Unix timestamp
	// (number of seconds sinds EPOCH).
	//
	// Example: 1644009612
	// Required: true
	Created int64 `json:"Created"`

	// ID is the content-addressable ID of an image.
	//
	// This identifier is a content-addressable digest calculated from the
	// image's configuration (which includes the digests of layers used by
	// the image).
	//
	// Note that this digest differs from the `RepoDigests` below, which
	// holds digests of image manifests that reference the image.
	//
	// Example: sha256:ec3f0931a6e6b6855d76b2d7b0be30e81860baccd891b2e243280bf1cd8ad710
	// Required: true
	ID string `json:"Id"`

	// User-defined key/value metadata.
	// Example: {"com.example.some-label":"some-value","com.example.some-other-label":"some-other-value"}
	// Required: true
	Labels map[string]string `json:"Labels"`

	// ID of the parent image.
	//
	// Depending on how the image was created, this field may be empty and
	// is only set for images that were built/created locally. This field
	// is empty if the image was pulled from an image registry.
	//
	// Required: true
	ParentID string `json:"ParentId"`

	// List of content-addressable digests of locally available image manifests
	// that the image is referenced from. Multiple manifests can refer to the
	// same image.
	//
	// These digests are usually only available if the image was either pulled
	// from a registry, or if the image was pushed to a registry, which is when
	// the manifest is generated and its digest calculated.
	//
	// Example: ["example@sha256:afcc7f1ac1b49db317a7196c902e61c6c3c4607d63599ee1a82d702d249a0ccb","internal.registry.example.com:5000/example@sha256:b69959407d21e8a062e0416bf13405bb2b71ed7a84dde4158ebafacfa06f5578"]
	// Required: true
	RepoDigests []string `json:"RepoDigests"`

	// List of image names/tags in the local image cache that reference this
	// image.
	//
	// Multiple image tags can refer to the same image, and this list may be
	// empty if no tags reference the image, in which case the image is
	// "untagged", in which case it can still be referenced by its ID.
	//
	// Example: ["example:1.0","example:latest","example:stable","internal.registry.example.com:5000/example:1.0"]
	// Required: true
	RepoTags []string `json:"RepoTags"`

	// Total size of image layers that are shared between this image and other
	// images.
	//
	// This size is not calculated by default. `-1` indicates that the value
	// has not been set / calculated.
	//
	// Example: 1239828
	// Required: true
	SharedSize int64 `json:"SharedSize"`

	// Total size of the image including all layers it is composed of.
	//
	// Example: 172064416
	// Required: true
	Size int64 `json:"Size"`

	// Total size of the image including all layers it is composed of.
	//
	// Deprecated: this field is omitted in API v1.44, but kept for backward compatibility. Use Size instead.
	// Example: 172064416
	VirtualSize int64 `json:"VirtualSize,omitempty"`
}

// Validate validates this summary
func (m *Summary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContainers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepoDigests(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepoTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSharedSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Summary) validateContainers(formats strfmt.Registry) error {

	if err := validate.Required("Containers", "body", int64(m.Containers)); err != nil {
		return err
	}

	return nil
}

func (m *Summary) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("Created", "body", int64(m.Created)); err != nil {
		return err
	}

	return nil
}

func (m *Summary) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("Id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Summary) validateLabels(formats strfmt.Registry) error {

	if err := validate.Required("Labels", "body", m.Labels); err != nil {
		return err
	}

	return nil
}

func (m *Summary) validateParentID(formats strfmt.Registry) error {

	if err := validate.RequiredString("ParentId", "body", m.ParentID); err != nil {
		return err
	}

	return nil
}

func (m *Summary) validateRepoDigests(formats strfmt.Registry) error {

	if err := validate.Required("RepoDigests", "body", m.RepoDigests); err != nil {
		return err
	}

	return nil
}

func (m *Summary) validateRepoTags(formats strfmt.Registry) error {

	if err := validate.Required("RepoTags", "body", m.RepoTags); err != nil {
		return err
	}

	return nil
}

func (m *Summary) validateSharedSize(formats strfmt.Registry) error {

	if err := validate.Required("SharedSize", "body", int64(m.SharedSize)); err != nil {
		return err
	}

	return nil
}

func (m *Summary) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("Size", "body", int64(m.Size)); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this summary based on context it is used
func (m *Summary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Summary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Summary) UnmarshalBinary(b []byte) error {
	var res Summary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package container

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FilesystemChange Change in the container's filesystem.
//
// swagger:model FilesystemChange
type FilesystemChange struct {

	// kind
	// Required: true
	Kind ChangeType `json:"Kind"`

	// Path to file or directory that has changed.
	//
	// Required: true
	Path string `json:"Path"`
}

// Validate validates this filesystem change
func (m *FilesystemChange) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FilesystemChange) validateKind(formats strfmt.Registry) error {

	if err := validate.Required("Kind", "body", ChangeType(m.Kind)); err != nil {
		return err
	}

	if err := m.Kind.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Kind")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("Kind")
		}
		return err
	}

	return nil
}

func (m *FilesystemChange) validatePath(formats strfmt.Registry) error {

	if err := validate.RequiredString("Path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this filesystem change based on the context it is used
func (m *FilesystemChange) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateKind(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FilesystemChange) contextValidateKind(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Kind.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Kind")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("Kind")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FilesystemChange) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FilesystemChange) UnmarshalBinary(b []byte) error {
	var res FilesystemChange
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
